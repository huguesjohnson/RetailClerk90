; generated by build tools

MEM_START=$FFFF0000
;
;*******************************************************************************
; memory map for retail clerk 90 specific things
;*******************************************************************************
;-------------------------------------------------------------------------------
; debug registers
;-------------------------------------------------------------------------------
MEM_DEBUG_1=$FFFF0000	; general debug register
MEM_DEBUG_2=$FFFF0002	; general debug register;
;-------------------------------------------------------------------------------
; relationship levels
;-------------------------------------------------------------------------------
MEM_PLAYER1_REL0=$FFFF0004	; relationship score for p1 and npc0
MEM_PLAYER1_REL1=$FFFF0006	; relationship score for p1 and npc1
MEM_PLAYER1_REL2=$FFFF0008	; relationship score for p1 and npc2
MEM_PLAYER2_REL0=$FFFF000A	; relationship score for p2 and npc0
MEM_PLAYER2_REL1=$FFFF000C	; relationship score for p2 and npc1
MEM_PLAYER2_REL2=$FFFF000E	; relationship score for p2 and npc2
;-------------------------------------------------------------------------------
; trading sequence
;-------------------------------------------------------------------------------
MEM_TRADING_SEQUENCE_DAY=$FFFF0010	; track trading sequence for the daytime
MEM_TRADING_SEQUENCE_NIGHT=$FFFF0014	; track trading sequence for the nighttime
;*******************************************************************************
; memory map for the base retail clerk game engine
;*******************************************************************************
;
;-------------------------------------------------------------------------------
; table to sort the draw order of sprites
;-------------------------------------------------------------------------------
MEM_SPRITE_SORT_TABLE_SORTED=$FFFF0018	; 0000=sorted
MEM_SPRITE_SORT_TABLE_ID0=$FFFF001A	; sort table ID 0
MEM_SPRITE_SORT_TABLE_VALUE0=$FFFF001C	; sort table value 0
MEM_SPRITE_SORT_TABLE_ID1=$FFFF001E	; sort table ID 1
MEM_SPRITE_SORT_TABLE_VALUE1=$FFFF0020	; sort table value 1
MEM_SPRITE_SORT_TABLE_ID2=$FFFF0022	; sort table ID 2
MEM_SPRITE_SORT_TABLE_VALUE2=$FFFF0024	; sort table value 2
MEM_SPRITE_SORT_TABLE_ID3=$FFFF0026	; sort table ID 3
MEM_SPRITE_SORT_TABLE_VALUE3=$FFFF0028	; sort table value 3
MEM_SPRITE_SORT_TABLE_ID4=$FFFF002A	; sort table ID 4
MEM_SPRITE_SORT_TABLE_VALUE4=$FFFF002C	; sort table value 4
;-------------------------------------------------------------------------------
; counters
;-------------------------------------------------------------------------------
MEM_VBLANK_COUNTER=$FFFF002E	; incremented at vblank - used for debug & RNG
MEM_MAINLOOP_COUNTER=$FFFF0030	; used for debug & RNG
MEM_FRAME_COUNTER=$FFFF0032	; current frame
;-------------------------------------------------------------------------------
; program flow
;-------------------------------------------------------------------------------
MEM_NPC_LOOP_COUNTER=$FFFF0034	; used for loop control in main
;-------------------------------------------------------------------------------
; controller input
;-------------------------------------------------------------------------------
MEM_CONTROL_1_ID=$FFFF0036	; what type of controller is connected
MEM_CONTROL_1_6BUTTON=$FFFF0038	; whether first controller is 6 button
MEM_CONTROL_HELD=$FFFF003A	; store value of regular held buttons
MEM_CONTROL_PRESSED=$FFFF003C	; store value of regular pressed buttons
MEM_CONTROL_6_HELD=$FFFF003E	; store value of extra held buttons
MEM_CONTROL_6_PRESSED=$FFFF0040	; store value of extra pressed buttons
;-------------------------------------------------------------------------------
; game state
;-------------------------------------------------------------------------------
; MEM_OBJECTIVE is first because it's used for save game title 
MEM_OBJECTIVE=$FFFF0042	; which text to show on objectives
MEM_GAME_STATE=$FFFF0044	; used to control the main loop flow
MEM_ACTION_ID=$FFFF0048	; current action selected by player
MEM_ACTION_TARGET_OBJID=$FFFF004A	; action target object id
MEM_ACTION_TARGET_NPCID=$FFFF004C	; NPC id if action target is an NPC
MEM_ACTION_TARGET_NPC_DIRECTION=$FFFF004E	; put NPC back in right direction
MEM_ACTION_TABLE_OFFSET=$FFFF0050	; relative address of action table entry
MEM_ACTIVE_ITEM=$FFFF0052	; item that is currently being used
MEM_NPC_LOCATIONS=$FFFF0054	; table to track where NPCs are located
MEM_INTRO_SCENE_COUNTER=$FFFF00F8	; counter for displaying the intro screen
MEM_DAY=$FFFF00FA	; what day is it in the story
MEM_PLAYER_SPRITE=$FFFF00FC	; which sprite to use for the player
MEM_GLOBAL_EVENT_FLAGS=$FFFF00FE	; track events across days
MEM_DAY_EVENT_FLAGS=$FFFF0102	; track events in the current day
MEM_CUSTOMER_FEEDBACK_SCORE=$FFFF0106	; used for some missions
MEM_MENU_SCREEN_PAGE=$FFFF0108	; last page viewed in menu screen
MEM_STORY_EVENT1_SCENE_ID=$FFFF010A	; scene where the next story event occurs
MEM_STORY_EVENT2_SCENE_ID=$FFFF010C	; scene where the next story event occurs
MEM_OPTIONAL_EVENT1_SCENE_ID=$FFFF010E	; scene where an optional event occurs
MEM_OPTIONAL_EVENT2_SCENE_ID=$FFFF0110	; scene where an optional event occurs
MEM_OPTIONAL_EVENT3_SCENE_ID=$FFFF0112	; scene where an optional event occurs
;-------------------------------------------------------------------------------
; player inventory
;-------------------------------------------------------------------------------
MEM_PLAYER1_ITEM_COUNT=$FFFF0114	; how many items the player is holding
MEM_PLAYER1_ITEMS=$FFFF0116	; four items
MEM_PLAYER2_ITEM_COUNT=$FFFF011E	; how many items the player is holding
MEM_PLAYER2_ITEMS=$FFFF0120	; four items
;-------------------------------------------------------------------------------
; sprite management
;-------------------------------------------------------------------------------
MEM_SPRITE_Y_ORDER_CHANGED=$FFFF0128	; track if sprite order has changed
MEM_PLAYER_SPRITE_ID=$FFFF012A	; sprite table id of player sprite
MEM_PLAYER_SPRITE_X=$FFFF012C	; virtual x position of the player
MEM_PLAYER_SPRITE_Y=$FFFF012E	; virtual y position of the player
MEM_PLAYER_SPRITE_PATTERN_INDEX=$FFFF0130	; index of pattern in VDP
MEM_PLAYER_SPRITE_DIRECTION=$FFFF0132	; which direction the player faces
MEM_PLAYER_SPRITE_FRAME=$FFFF0134	; animation frame of player sprite
MEM_PLAYER_SPRITE_STEP_COUNTER=$FFFF0136	; used to determine when to move
MEM_PLAYER_MOVEMENT_COUNTER=$FFFF0138	; used to determine how far to move
MEM_PLAYER_MOVE_FREQUENCY=$FFFF013A	; how often to move
MEM_PLAYER_MOVE_PATTERN=$FFFF013C	; movement pattern
MEM_PLAYER_MOVE_PATTERN_LENGTH=$FFFF0140	; length of movement pattern
MEM_PLAYER_MOVE_INDEX=$FFFF0142	; where the sprite is the movement pattern
MEM_NPC0_SPRITE_ID=$FFFF0144	; sprite table id of NPC0 sprite
MEM_NPC0_SPRITE_X=$FFFF0146	; virtual x position of NPC0 sprite
MEM_NPC0_SPRITE_Y=$FFFF0148	; virtual y position of NPC0 sprite
MEM_NPC0_SPRITE_PATTERN_INDEX=$FFFF014A	; index of pattern in VDP
MEM_NPC0_SPRITE_DIRECTION=$FFFF014C	; which direction NPC0 faces
MEM_NPC0_SPRITE_FRAME=$FFFF014E	; animation frame of NPC0 sprite
MEM_NPC0_SPRITE_STEP_COUNTER=$FFFF0150	; used to determine when to move
MEM_NPC0_MOVEMENT_COUNTER=$FFFF0152	; used to determine how far to move
MEM_NPC0_MOVE_FREQUENCY=$FFFF0154	; how often to move
MEM_NPC0_MOVE_PATTERN=$FFFF0156	; movement pattern
MEM_NPC0_MOVE_PATTERN_LENGTH=$FFFF015A	; length of movement pattern
MEM_NPC0_MOVE_INDEX=$FFFF015C	; where the sprite is the movement pattern
MEM_NPC1_SPRITE_ID=$FFFF015E	; sprite table id of NPC1 sprite
MEM_NPC1_SPRITE_X=$FFFF0160	; virtual x position of NPC1 sprite
MEM_NPC1_SPRITE_Y=$FFFF0162	; virtual y position of NPC1 sprite
MEM_NPC1_SPRITE_PATTERN_INDEX=$FFFF0164	; index of pattern in VDP
MEM_NPC1_SPRITE_DIRECTION=$FFFF0166	; which direction NPC1 faces
MEM_NPC1_SPRITE_FRAME=$FFFF0168	; animation frame of NPC1 sprite
MEM_NPC1_SPRITE_STEP_COUNTER=$FFFF016A	; used to determine when to move
MEM_NPC1_MOVEMENT_COUNTER=$FFFF016C	; used to determine how far to move
MEM_NPC1_MOVE_FREQUENCY=$FFFF016E	; how often to move
MEM_NPC1_MOVE_PATTERN=$FFFF0170	; movement pattern
MEM_NPC1_MOVE_PATTERN_LENGTH=$FFFF0174	; length of movement pattern
MEM_NPC1_MOVE_INDEX=$FFFF0176	; where the sprite is the movement pattern
MEM_NPC2_SPRITE_ID=$FFFF0178	; sprite table id of NPC2 sprite
MEM_NPC2_SPRITE_X=$FFFF017A	; virtual x position of NPC2 sprite
MEM_NPC2_SPRITE_Y=$FFFF017C	; virtual y position of NPC2 sprite
MEM_NPC2_SPRITE_PATTERN_INDEX=$FFFF017E	; index of pattern in VDP
MEM_NPC2_SPRITE_DIRECTION=$FFFF0180	; which direction NPC2 faces
MEM_NPC2_SPRITE_FRAME=$FFFF0182	; animation frame of NPC2 sprite
MEM_NPC2_SPRITE_STEP_COUNTER=$FFFF0184	; used to determine when to move
MEM_NPC2_MOVEMENT_COUNTER=$FFFF0186	; used to determine how far to move
MEM_NPC2_MOVE_FREQUENCY=$FFFF0188	; how often to move
MEM_NPC2_MOVE_PATTERN=$FFFF018A	; movement pattern
MEM_NPC2_MOVE_PATTERN_LENGTH=$FFFF018E	; length of movement pattern
MEM_NPC2_MOVE_INDEX=$FFFF0190	; where the sprite is the movement pattern
MEM_NPC3_SPRITE_ID=$FFFF0192	; sprite table id of NPC3 sprite
MEM_NPC3_SPRITE_X=$FFFF0194	; virtual x position of NPC3 sprite
MEM_NPC3_SPRITE_Y=$FFFF0196	; virtual y position of NPC3 sprite
MEM_NPC3_SPRITE_PATTERN_INDEX=$FFFF0198	; index of pattern in VDP
MEM_NPC3_SPRITE_DIRECTION=$FFFF019A	; which direction NPC3 faces
MEM_NPC3_SPRITE_FRAME=$FFFF019C	; animation frame of NPC3 sprite
MEM_NPC3_SPRITE_STEP_COUNTER=$FFFF019E	; used to determine when to move
MEM_NPC3_MOVEMENT_COUNTER=$FFFF01A0	; used to determine how far to move
MEM_NPC3_MOVE_FREQUENCY=$FFFF01A2	; how often to move
MEM_NPC3_MOVE_PATTERN=$FFFF01A4	; movement pattern
MEM_NPC3_MOVE_PATTERN_LENGTH=$FFFF01A8	; length of movement pattern
MEM_NPC3_MOVE_INDEX=$FFFF01AA	; where the sprite is the movement pattern
;-------------------------------------------------------------------------------
; active scene
;-------------------------------------------------------------------------------
MEM_ACTIVE_SCENE_ID=$FFFF01AC	; ID of the active scene
MEM_ACTIVE_SCENE_EXIT_S=$FFFF01AE	; south exit of active scene
MEM_ACTIVE_SCENE_EXIT_N=$FFFF01B0	; north exit of active scene
MEM_ACTIVE_SCENE_EXIT_W=$FFFF01B2	; west exit of active scene
MEM_ACTIVE_SCENE_EXIT_E=$FFFF01B4	; east exit of active scene
MEM_ACTIVE_NPC_COUNT=$FFFF01B6	; number of NPCs in the current scene
MEM_OBJECT_LIST_OBJS=$FFFF01B8	; list of objects in current map
MEM_OBJECT_LIST_NPCS=$FFFF01F4	; list of npcs in current map
MEM_SCENE_BGM=$FFFF020C	; reference to current background music
MEM_SCENE_PALETTE=$FFFF0210	; storing for fade in/out
;-------------------------------------------------------------------------------
; dialog & menu management
;-------------------------------------------------------------------------------
MEM_MENU_SELECTION=$FFFF0290	; which menu item is selected - used for sprite 0
MEM_MENU_RESPONSE=$FFFF0292	; which dialog choice was selected
MEM_DIALOG_FLAGS=$FFFF0294	; used to manage dialogs
MEM_DIALOG_TITLE=$FFFF0298	; pointer to location of dialog title
MEM_DIALOG_TEXT=$FFFF029C	; pointer to location of dialog text
MEM_DIALOG_VDP=$FFFF02A0	; pointer to VPD location to write text
MEM_DIALOG_ITEM_LIST=$FFFF02A4	; pointer to location of item list to display
MEM_DIALOG_ITEM_INDEX=$FFFF02A8	; track which item in the list is being drawn
;-------------------------------------------------------------------------------
; scripted event management
;-------------------------------------------------------------------------------
MEM_SCRIPTED_EVENT_ADDR=$FFFF02AA	; pointer to scripted event running
MEM_SCRIPTED_EVENT_ACTION=$FFFF02AE	; current scripted event action
MEM_SCRIPTED_EVENT_STEPS=$FFFF02B0	; steps remaining in current action
MEM_SCRIPTED_SPRITE_ADDR=$FFFF02B2	; which sprite to move
;-------------------------------------------------------------------------------
; temp working space
;-------------------------------------------------------------------------------
MEM_TEMP_SPACE=$FFFF02B6	; temp working space
;-------------------------------------------------------------------------------
; collision detection
;-------------------------------------------------------------------------------
MEM_ACTIVE_SPRITE_LEFT_COLUMN=$FFFF02F6	; left column of active sprite
MEM_ACTIVE_SPRITE_HIGH_LEFT=$FFFF02F8	; high left row of active sprite
MEM_ACTIVE_SPRITE_LOW_LEFT=$FFFF02FA	; low left row of active sprite
MEM_ACTIVE_SPRITE_RIGHT_COLUMN=$FFFF02FC	; right column of active sprite
MEM_ACTIVE_SPRITE_HIGH_RIGHT=$FFFF02FE	; high right row of active sprite
MEM_ACTIVE_SPRITE_LOW_RIGHT=$FFFF0300	; low right row of active sprite
MEM_COLLISION_MAP_ROW=$FFFF0302	; row of map data
MEM_COLLISION_RESULT=$FFFF0306	; result of collision test
MEM_COLLISION_DATA=$FFFF0308	; collision data for the current map
MEM_END=$FFFF04A8
