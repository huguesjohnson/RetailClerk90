/*
BuildToolsForRetailClerk90

Copyright (c) 2019-2021 Hugues Johnson

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files(the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software is furnished to do 
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
THE SOFTWARE.
*/

package com.huguesjohnson.retailclerk.build;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.util.Map;

import javax.imageio.IIOException;

import com.huguesjohnson.PathResolver;
import com.huguesjohnson.retailclerk.build.parameters.ConstantFileParameters;

public class BuildConstants{
	private final static String newLine=System.lineSeparator();

	public static void build(String basePath,ConstantFileParameters parameters){
		//bail if there's nothing to do
		if((parameters.fileMap==null)||(parameters.fileMap.size()<1)){return;}
		FileWriter constantFileWriter=null;
		FileWriter includeDataWriter=null;
		BufferedReader bufferedReader=null;
		String sourceFilePath=null;
		String currentLine=null;
		try{
			String includeFilePath=basePath+parameters.includeFilePath;
			includeDataWriter=new FileWriter(includeFilePath);
			includeDataWriter.write("; generated by build tools");
			includeDataWriter.write(newLine);
			includeDataWriter.write(newLine);
			for(Map.Entry<String,String> entry:parameters.fileMap.entrySet()){
				sourceFilePath=basePath+entry.getKey();
				//open source file
				bufferedReader=new BufferedReader(new InputStreamReader(new FileInputStream(new File(sourceFilePath))));
				//create output file
				String outputFilePath=basePath+entry.getValue();
				constantFileWriter=new FileWriter((new File(outputFilePath)));
				constantFileWriter.write("; generated by build tools");
				constantFileWriter.write(newLine);
				constantFileWriter.write(newLine);
				while((currentLine=bufferedReader.readLine())!=null){
					StringBuffer stringBuffer=new StringBuffer();
					if(currentLine.startsWith(";")){
						stringBuffer.append(currentLine);
					}else if(currentLine.startsWith("[IF")){
						stringBuffer.append("\tif\t");
						stringBuffer.append(currentLine.substring(4,currentLine.length()-1));
					}else if(currentLine.startsWith("[ELSE]")){
						stringBuffer.append("\telse");
					}else if(currentLine.startsWith("[ENDIF]")){
						stringBuffer.append("\tendif");
					}else{
						String[] split=currentLine.split(",");
						if((split!=null)&&(split.length>1)){
							stringBuffer.append(split[0]);
							stringBuffer.append("=");
							stringBuffer.append(split[1]);
							if(split.length>2){
								stringBuffer.append(" ; ");
								stringBuffer.append(split[2]);
							}
						}
					}
					stringBuffer.append(newLine);
					constantFileWriter.write(stringBuffer.toString());
				}				
				//close files
				bufferedReader.close();
				constantFileWriter.flush();
				constantFileWriter.close();
				//update the include file
				String includePathRel=PathResolver.getRelativePath(includeFilePath,outputFilePath);
				if(includePathRel.startsWith("..")){
					includePathRel=includePathRel.substring(3);
				}
				StringBuffer includeString=new StringBuffer();
				includeString.append("\tinclude '");
				includeString.append(includePathRel);
				includeString.append("'");
				includeString.append(newLine);
				includeString.append(newLine);
				includeDataWriter.write(includeString.toString());
			}
			//close include writer
			includeDataWriter.close();
		}catch(IIOException iiox){
			iiox.printStackTrace();
			System.err.println("sourceFilePath="+sourceFilePath);
		}catch(Exception x){
			x.printStackTrace();			
			System.err.println("currentLine="+currentLine);
		}finally{
			try{if(constantFileWriter!=null){constantFileWriter.flush(); constantFileWriter.close();}}catch(Exception x){ }
			try{if(includeDataWriter!=null){includeDataWriter.flush(); includeDataWriter.close();}}catch(Exception x){ }
			try{if(bufferedReader!=null){bufferedReader.close();}}catch(Exception x){ }
		}
	}
}