/*
BuildToolsForRetailClerk90

Copyright (c) 2019-2021 Hugues Johnson

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files(the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software is furnished to do 
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
THE SOFTWARE.
*/

package com.huguesjohnson.retailclerk.build;

import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Paths;

import com.google.gson.Gson;

import com.huguesjohnson.retailclerk.build.objects.StringCollection;
import com.huguesjohnson.retailclerk.build.objects.TextLine;
import com.huguesjohnson.retailclerk.build.parameters.TextParameters;

/*
I'm sort of generally unhappy with how I implemented strings and this class exposes how overly complex I made them.
*/

public class BuildText{
	private final static String newLine=System.lineSeparator();
	
	public static void build(String basePath,TextParameters parameters){
		FileWriter tableFileWriter=null;
		FileWriter textFileWriter=null;
		StringCollection stringCollection=null;
		TextLine textLine=null;
		try{
			//setup table writer
			tableFileWriter=new FileWriter(basePath+parameters.tableFilePath);
			tableFileWriter.write("; generated by build tools");
			tableFileWriter.write(newLine);
			//setup text writer
			textFileWriter=new FileWriter(basePath+parameters.textFilePath);
			textFileWriter.write("; generated by build tools");
			textFileWriter.write(newLine);
			for(int fileIndex=0;fileIndex<parameters.filePaths.length;fileIndex++){
				String textJson=Files.readString(Paths.get(basePath+parameters.filePaths[fileIndex]));
				stringCollection=(new Gson()).fromJson(textJson,StringCollection.class);
				boolean skipTable=false;
				if((stringCollection.skipTable!=null)&&(stringCollection.skipTable.equals("true"))){
					skipTable=true;
				}
				//write start of table
				if(!skipTable){
					tableFileWriter.write(newLine);
					tableFileWriter.write(";-------------------------------------------------------------------------------");
					tableFileWriter.write(newLine);
					tableFileWriter.write("; "+stringCollection.name);
					tableFileWriter.write(newLine);
					if((stringCollection.description!=null)&&(stringCollection.description.length()>0)){
						tableFileWriter.write("; "+stringCollection.description);
						tableFileWriter.write(newLine);
					}
					tableFileWriter.write(";-------------------------------------------------------------------------------");
					tableFileWriter.write(newLine);
					tableFileWriter.write(stringCollection.name+"TableStart:");
					tableFileWriter.write(newLine);
				}
				textFileWriter.write(newLine);
				textFileWriter.write(";-------------------------------------------------------------------------------");
				textFileWriter.write(newLine);
				textFileWriter.write("; "+stringCollection.name);
				textFileWriter.write(newLine);
				if((stringCollection.description!=null)&&(stringCollection.description.length()>0)){
					textFileWriter.write("; "+stringCollection.description);
					textFileWriter.write(newLine);
				}
				textFileWriter.write(";-------------------------------------------------------------------------------");
				textFileWriter.write(newLine);
				//loop through strings
				for(String key:stringCollection.lines.keySet()){
					textLine=stringCollection.lines.get(key);
					String terminator=stringCollection.defaultTerminator;
					if((textLine.terminator!=null)&&(textLine.terminator.length()>0)){terminator=textLine.terminator;}
					String lineFeed=stringCollection.defaultLineFeed;
					if((textLine.lineFeed!=null)&&(textLine.lineFeed.length()>0)){lineFeed=textLine.lineFeed;}
					String formFeed=stringCollection.defaultFormFeed;
					if((textLine.formFeed!=null)&&(textLine.formFeed.length()>0)){formFeed=textLine.formFeed;}
					char nextPageChar=stringCollection.defaultNextPageChar;
					if(textLine.nextPageChar!=nextPageChar){nextPageChar=textLine.nextPageChar;}
					if(!skipTable){
						tableFileWriter.write("\tdc.l\t"+key);
						tableFileWriter.write(newLine);
					}
					if(textLine.align>0){
						textFileWriter.write("\talign "+textLine.align);
						textFileWriter.write(newLine);
					}
					textFileWriter.write(key+":");
					textFileWriter.write(newLine);
					if((textLine.dialogTitle!=null)&&(textLine.dialogTitle.length()>0)){
						textFileWriter.write("\tdc.w\t"+textLine.dialogTitle);
						textFileWriter.write(newLine);
					}
					String text=textLine.text;
					if(text.length()>0){
						StringBuffer sb=new StringBuffer(text);
						int lineCount=0;
						while(sb.length()>stringCollection.lineLength){
							//check for line break
							int lastIndex=sb.substring(0,stringCollection.lineLength).indexOf('|');
							//try to break at the last space
							if(lastIndex<1){lastIndex=sb.substring(0,stringCollection.lineLength).lastIndexOf(' ');}
							if(lastIndex<1){lastIndex=stringCollection.lineLength;}
							if(lineCount<stringCollection.formLines){
								textFileWriter.write("\tdc.b\t\""+sb.substring(0,lastIndex)+"\",");
								textFileWriter.write(lineFeed);
								lineCount++;
							}else{
								StringBuffer paddedSb=new StringBuffer(sb.substring(0,lastIndex));
								while(paddedSb.length()<stringCollection.lineLength){
									paddedSb.append(" ");
								}
								paddedSb.setCharAt(stringCollection.lineLength-1,nextPageChar);
								textFileWriter.write("\tdc.b\t\""+paddedSb.toString()+"\",");
								textFileWriter.write(formFeed);
								lineCount=0;
							}
							textFileWriter.write(newLine);
							//remove the text that was written
							sb.delete(0,lastIndex);
							//trim leading spaces or breaks that remain
							while((sb.length()>0)&&((sb.charAt(0)==' ')||(sb.charAt(0)=='|'))){
								sb.deleteCharAt(0);
							}
						}
						//now at the last line
						textFileWriter.write("\tdc.b\t\""+sb.toString()+"\","+terminator);
						textFileWriter.write(newLine);
					}
				}
				//write end of table
				if(!skipTable){
					tableFileWriter.write(stringCollection.name+"TableEnd:");
					tableFileWriter.write(newLine);
				}
			}
			//end of text file
			textFileWriter.write(newLine);
			textFileWriter.write("\talign 2");
		}catch(Exception x){
			x.printStackTrace();
			if(stringCollection!=null){
				System.err.println("stringCollection.name="+stringCollection.name);
				if(textLine!=null){
					System.err.println("textLine.text="+textLine.text);
				}
			}
		}finally{
			try{if(tableFileWriter!=null){tableFileWriter.flush(); tableFileWriter.close();}}catch(Exception x){ }
			try{if(textFileWriter!=null){textFileWriter.flush(); textFileWriter.close();}}catch(Exception x){ }
		}
	}
}